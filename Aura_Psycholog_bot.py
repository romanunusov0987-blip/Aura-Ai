# =========================================
# Aura | –û–Ω–ª–∞–π–Ω-–ø—Å–∏—Ö–æ–ª–æ–≥ ‚Äî –û–î–ò–ù –§–ê–ô–õ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# =========================================
# –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–º:
# - üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏: –∫–æ–º–∞–Ω–¥–∞ /meditation –∏ –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é.
#   –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –∏–ª–∏ –ø–æ URL,
#   –∫—ç—à–∏—Ä—É–µ—Ç file_id Telegram –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
# - üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ¬´–∫–∞–∫ —É –≤–∑—Ä–æ—Å–ª—ã—Ö¬ª:
#   * –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ —Å–æ–ª—å-—à–∏—Ñ—Ä—É tg_id ‚Üí /start ref<code>
#   * –£—á–µ—Ç –∫–ª–∏–∫–∞ –∏ ¬´—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏¬ª (join) –≤ –ë–î
#   * –ë–æ–Ω—É—Å—ã: –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É ‚Äî —Å—Ä–∞–∑—É N –¥–Ω–µ–π; –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É ‚Äî –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–¥–µ–º–æ: –ø—Ä–∏ –∫–ª–∏–∫–µ ¬´–æ–ø–ª–∞—Ç–∏—Ç—å¬ª)
#   * /referrals ‚Äî —Å–≤–æ–¥–∫–∞, —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å—ã
# - –ù–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–æ–≤/–∫–æ–º–∞–Ω–¥.
#
# –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
# - AUDIO_DIR                ‚Äî –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏ (mp3/m4a/ogg). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ./meditations —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
# - AUDIO_BASE_URL           ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∞—É–¥–∏–æ —Å CDN/—Å–∞–π—Ç–∞ (–ø—Ä–∏–º–µ—Ä: https://cdn.example.com/meditations)
# - REF_SALT                 ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ-—Å–æ–ª—å –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ.–∫–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8349271)
# - REF_BONUS_DAYS_JOINED    ‚Äî —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–∞—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
# - REF_BONUS_DAYS_PAID      ‚Äî —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–∞—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
#
# –ö—É–¥–∞ –∫–ª–∞—Å—Ç—å –∞—É–¥–∏–æ:
# - –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É "meditations" —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º –∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ .mp3/.m4a/.ogg.
#   –ù–∞–ø—Ä–∏–º–µ—Ä: ./meditations/breath_3min.mp3, ./meditations/body_scan_7min.mp3
#   –ò–º–µ–Ω–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∏–∑ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è/–¥–µ—Ñ–∏—Å—ã ‚Üí –ø—Ä–æ–±–µ–ª—ã).
# - –õ–∏–±–æ —É–∫–∞–∂–∏—Ç–µ AUDIO_BASE_URL –∏ —Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–≤–æ—ë–º —Ö–æ—Å—Ç–∏–Ω–≥–µ/CDN.
#   –ü—Ä–∏–º–µ—Ä: AUDIO_BASE_URL="https://cdn.example.com/meditations" ‚Üí –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å URL –≤–∏–¥–∞ .../body_scan_7min.mp3

import os
import re
import json
import time
import uuid
import hashlib
import asyncio
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Tuple, AsyncGenerator
from urllib.parse import urljoin

# –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-dotenv (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
try:
    from dotenv import load_dotenv  # type: ignore
    load_dotenv()
except Exception:
    pass

from db import Base, SessionLocal, init_db

# -------------------------
# 1) –ù–ê–°–¢–†–û–ô–ö–ò
# -------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
DEEPSEEK_API_KEY   = os.getenv("DEEPSEEK_API_KEY", "")
DEEPSEEK_BASE_URL  = os.getenv("DEEPSEEK_BASE_URL", "https://api.deepseek.com").rstrip("/")
DEEPSEEK_MODEL     = os.getenv("DEEPSEEK_MODEL", "deepseek-chat")
REDIS_URL          = os.getenv("REDIS_URL")  # –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
CONVERSATION_HISTORY_LIMIT = int(os.getenv("CONVERSATION_HISTORY_LIMIT", "10"))

# –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ/—Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫
AUDIO_DIR          = os.getenv("AUDIO_DIR", os.path.join(os.path.dirname(__file__), "meditations"))
AUDIO_BASE_URL     = (os.getenv("AUDIO_BASE_URL") or "").rstrip("/") or None

REF_SALT                 = int(os.getenv("REF_SALT", "8349271"))
REF_BONUS_DAYS_JOINED    = int(os.getenv("REF_BONUS_DAYS_JOINED", "7"))
REF_BONUS_DAYS_PAID      = int(os.getenv("REF_BONUS_DAYS_PAID", "7"))

if not TELEGRAM_BOT_TOKEN:
    raise SystemExit("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN (—Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ BotFather –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω).")

# -------------------------
# 2) –¢–ï–ö–°–¢–´ –ò –†–û–õ–ò (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç—É—Ç)
# -------------------------
STYLE_SYSTEM = (
    "–¢–æ–Ω: —Ç—ë–ø–ª–∞—è, –ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –¢–µ—Ö–Ω–∏–∫–∏: –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ, –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, "
    "–º–∏–∫—Ä–æ-—à–∞–≥ –Ω–∞ 10‚Äì15 –º–∏–Ω—É—Ç. –ë–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤. –ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Å—É—Ä—Å—ã.\n"
    "–§–æ—Ä–º–∞—Ç: 2‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤. –ó–∞–≤–µ—Ä—à–∏ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –º–∏–Ω–∏-—à–∞–≥–æ–º."
)

PERSONAS: Dict[str, Dict[str, str]] = {
    "pro_psychologist": {
        "title": "üéì –ü—Å–∏—Ö–æ–ª–æ–≥ (–ø—Ä–æ—Ñ.)",
        "system": (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
            "–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ, –æ–±—ä—è—Å–Ω—è–π ¬´–∑–∞—á–µ–º¬ª –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–≤–∞–π 2‚Äì3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞."
        ),
    },
    "mentor_growth": {
        "title": "üå± –ù–∞—Å—Ç–∞–≤–Ω–∏—Ü–∞ —Ä–∞–∑–≤–∏—Ç–∏—è",
        "system": (
            "–¢—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏—Ü–∞. –§–æ–∫—É—Å –Ω–∞ —Ü–µ–ª—è—Ö –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö. "
            "–ü–æ–º–æ–≥–∞–π –¥—Ä–æ–±–∏—Ç—å –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∏–∫—Ä–æ-—à–∞–≥–∏ (10‚Äì15 –º–∏–Ω—É—Ç)."
        ),
    },
    "friend_fun": {
        "title": "üí¨ –ü–æ–¥—Ä—É–∂–∫–∞-—Ö–∞—Ö–∞—Ç—É—à–∫–∞",
        "system": (
            "–¢—ã ‚Äî —Ç—ë–ø–ª–∞—è –ø–æ–¥—Ä—É–∂–∫–∞. –ß—É—Ç—å-—á—É—Ç—å —é–º–æ—Ä–∞ —É–º–µ—Å—Ç–Ω–æ. "
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π. –í —Ç—è–∂—ë–ª—ã—Ö —Ç–µ–º–∞—Ö ‚Äî –º—è–≥—á–µ."
        ),
    },
}

CRISIS_TEXT = (
    "–ü–æ—Ö–æ–∂–µ, —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ. –Ø —Ä—è–¥–æ–º, –Ω–æ —è –Ω–µ —Å–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏.\n\n"
    "–ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∏—Å–∫ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å —Å–µ–±–µ –∏–ª–∏ –∫–æ–º—É-—Ç–æ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ **112** (—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã, –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –ø–æ –†–§).\n"
    "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –ú–ß–°: **+7 (495) 989-50-50**. –ú–æ—Å–∫–≤–∞ ‚Äî 051 / +7 (495) 051.\n"
    "–î–µ—Ç—è–º/–ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º: **8-800-2000-122** (–∫–æ—Ä–æ—Ç–∫–∏–π **124** —É –º–æ–±–∏–ª—å–Ω—ã—Ö).\n"
    "–î–ª—è –∂–µ–Ω—â–∏–Ω, –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –æ—Ç –Ω–∞—Å–∏–ª–∏—è: **8-800-7000-600**.\n\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å: 1) –≥–¥–µ –≤—ã, 2) –∫—Ç–æ —Ä—è–¥–æ–º, 3) —á—Ç–æ —Å–Ω–∏–∑–∏—Ç –æ—Å—Ç—Ä–æ—Ç—É –Ω–∞ 10%?"
)

def text_matches(*variants: str):
    """–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤."""
    normalized = {variant.casefold() for variant in variants}

    def _checker(text: Optional[str]) -> bool:
        return bool(text) and text.strip().casefold() in normalized

    return F.text.func(_checker)

TARIFF_PLAN_ORDER = [
    "znakomstvo",
    "legkoe_dyhanie",
    "novaya_zhizn",
]

TARIFF_PLANS: Dict[str, Dict[str, Any]] = {
    "znakomstvo": {
        "title": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
        "monthly_price": 2900,
        "annual_price": 31320,
        "annual_discount": 10,
        "limits": "–¥–æ 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏, 1 –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, 1 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "support": "–±–∞–∑–æ–≤–∞—è, –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤",
        "trial": "7 –¥–Ω–µ–π, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤",
        "extra_events_price": 900,
        "addons": [
            "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äî 500 ‚ÇΩ/–º–µ—Å",
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî 700 ‚ÇΩ/–º–µ—Å",
        ],
    },
    "legkoe_dyhanie": {
        "title": "–õ—ë–≥–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ",
        "monthly_price": 5400,
        "annual_price": 57240,
        "annual_discount": 12,
        "limits": "–¥–æ 80 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏, 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞, 2 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "support": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è, –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤",
        "trial": "10 –¥–Ω–µ–π, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 25 –∑–∞–ø—Ä–æ—Å–æ–≤",
        "extra_events_price": 750,
        "addons": [
            "–≥—Ä—É–ø–ø–æ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è –æ–Ω–ª–∞–π–Ω ‚Äî 1 200 ‚ÇΩ/–º–µ—Å",
            "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç ‚Äî 900 ‚ÇΩ/–º–µ—Å",
        ],
    },
    "novaya_zhizn": {
        "title": "–ù–æ–≤–∞—è –∂–∏–∑–Ω—å",
        "monthly_price": 9800,
        "annual_price": 100800,
        "annual_discount": 14,
        "limits": "–¥–æ 200 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏, 6 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤, 4 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "support": "–ø—Ä–µ–º–∏—É–º, –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —á–∞—Å–æ–≤, –ª–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä",
        "trial": "14 –¥–Ω–µ–π, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 50 –∑–∞–ø—Ä–æ—Å–æ–≤",
        "extra_events_price": 600,
        "addons": [
            "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî 2 500 ‚ÇΩ –∑–∞ —Å–µ—Å—Å–∏—é",
            "–æ—Ñ–ª–∞–π–Ω-—Ä–µ—Ç—Ä–∏—Ç —Ä–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª ‚Äî 9 000 ‚ÇΩ",
            "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π –ø–∞–∫–µ—Ç (+2 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ‚Äî 1 400 ‚ÇΩ/–º–µ—Å",
        ],
    },
}

TARIFF_RATIONALE = (
    "–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –æ—Ç—Ä–∞–∂–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—è –æ–∂–∏–¥–∞–Ω–∏—è–º –∂–µ–Ω—â–∏–Ω 23‚Äì50 –ª–µ—Ç: "
    "–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º –¥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ì–æ–¥–æ–≤—ã–µ –ø–ª–∞–Ω—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É "
    "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã."
)

TARIFF_FAQ: List[Dict[str, str]] = [
    {
        "q": "–ú–æ–∂–Ω–æ –ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ?",
        "a": "–î–∞, –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–ª–∞—Ç–µ–∂–µ.",
    },
    {
        "q": "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ–º?",
        "a": "–õ—é–±–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—Ä–æ—Å, –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.",
    },
    {
        "q": "–ï—Å—Ç—å –ª–∏ —Å–µ–º–µ–π–Ω—ã–π –¥–æ—Å—Ç—É–ø?",
        "a": "–î–∞, –≤ —Ç–∞—Ä–∏—Ñ–µ ¬´–ù–æ–≤–∞—è –∂–∏–∑–Ω—å¬ª –¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–¥–æ–Ω ¬´—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π –ø–∞–∫–µ—Ç¬ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.",
    },
    {
        "q": "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É –Ω–∞ –≥–æ–¥?",
        "a": "–î–∞, –≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ç—Ä–∏ —Ä–∞–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.",
    },
    {
        "q": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?",
        "a": "–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤; –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ø. —Å–æ–±—ã—Ç–∏—è.",
    },
]

# -------------------------
# 3) –ë–ê–ó–ê –î–ê–ù–ù–´–• (SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
#    –•—Ä–∞–Ω–∏–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–Ω–µ–≤–Ω–∏–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤, —Å–æ–±—ã—Ç–∏—è, –∫—ç—à –º–µ–¥–∏–∞, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –±–æ–Ω—É—Å—ã.
# -------------------------
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import String, Integer, DateTime, ForeignKey, Text, JSON, Boolean, select, delete, text as sqltext, func
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import FastAPI, Depends, HTTPException, status
from pydantic import BaseModel, EmailStr, Field

class User(Base):
    __tablename__ = "users"
    id: Mapped[int]       = mapped_column(Integer, primary_key=True)
    tg_id: Mapped[str]    = mapped_column(String, unique=True, index=True)
    username: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    persona: Mapped[str]  = mapped_column(String, default="pro_psychologist")
    plan: Mapped[str]     = mapped_column(String, default="LIGHT")
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

class JournalEntry(Base):
    __tablename__ = "journal_entries"
    id: Mapped[int]       = mapped_column(Integer, primary_key=True)
    user_id: Mapped[int]  = mapped_column(Integer, ForeignKey("users.id"), index=True)
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())
    mood: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    text: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

class ConversationMessage(Base):
    __tablename__ = "conversation_messages"
    id: Mapped[int]       = mapped_column(Integer, primary_key=True)
    user_id: Mapped[int]  = mapped_column(Integer, ForeignKey("users.id"), index=True)
    role: Mapped[str]     = mapped_column(String, nullable=False)
    content: Mapped[str]  = mapped_column(Text, nullable=False)
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

class ScaleResult(Base):
    __tablename__ = "scale_results"
    id: Mapped[int]       = mapped_column(Integer, primary_key=True)
    user_id: Mapped[int]  = mapped_column(Integer, ForeignKey("users.id"), index=True)
    scale: Mapped[str]    = mapped_column(String)  # PHQ9 | GAD7
    score: Mapped[int]    = mapped_column(Integer)
    answers: Mapped[dict] = mapped_column(JSON)
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

class EventLog(Base):
    __tablename__ = "event_logs"
    id: Mapped[int]       = mapped_column(Integer, primary_key=True)
    user_tg_id: Mapped[str] = mapped_column(String, index=True)
    event: Mapped[str]    = mapped_column(String)  # message_sent, ai_reply, crisis_detected ...
    payload: Mapped[Optional[dict]] = mapped_column(JSON, nullable=True)
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

# –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
class MediaCache(Base):
    __tablename__ = "media_cache"
    id: Mapped[int]       = mapped_column(Integer, primary_key=True)
    key: Mapped[str]      = mapped_column(String, unique=True, index=True)  # –Ω–∞–ø—Ä–∏–º–µ—Ä, med:<slug>
    file_id: Mapped[str]  = mapped_column(String)  # Telegram file_id
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

class Referral(Base):
    __tablename__ = "referrals"
    id: Mapped[int]            = mapped_column(Integer, primary_key=True)
    code: Mapped[str]          = mapped_column(String, index=True)              # —Ä–µ—Ñ.–∫–æ–¥, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    referrer_tg_id: Mapped[str]= mapped_column(String, index=True)              # –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    referred_tg_id: Mapped[Optional[str]] = mapped_column(String, index=True, nullable=True)  # –∫—Ç–æ –ø—Ä–∏—à—ë–ª
    status: Mapped[str]        = mapped_column(String)  # clicked | joined | paid | self | invalid
    created_at: Mapped[Any]    = mapped_column(DateTime(timezone=True), server_default=func.now())

class UserBonus(Base):
    __tablename__ = "user_bonuses"
    id: Mapped[int]            = mapped_column(Integer, primary_key=True)
    user_tg_id: Mapped[str]    = mapped_column(String, index=True)
    type: Mapped[str]          = mapped_column(String)  # ref_join, ref_paid, promo –∏ —Ç.–ø.
    days: Mapped[int]          = mapped_column(Integer, default=0)
    activated: Mapped[bool]    = mapped_column(Boolean, default=True)
    payload: Mapped[Optional[dict]] = mapped_column(JSON, nullable=True)  # –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≤—ë–ª –∏ —Ç.–¥.)
    created_at: Mapped[Any]    = mapped_column(DateTime(timezone=True), server_default=func.now())
    activated_at: Mapped[Optional[Any]] = mapped_column(DateTime(timezone=True), nullable=True)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ª–æ–≥–∏–∫–∞ –¥–ª—è SaaS-—Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è referral_app)
class ReferralPortalUser(Base):
    __tablename__ = "referral_portal_users"

    id: Mapped[str] = mapped_column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    email: Mapped[str] = mapped_column(String(255), unique=True, index=True)
    name: Mapped[str] = mapped_column(String(255))
    password_hash: Mapped[str] = mapped_column(String(255))
    referral_code: Mapped[Optional[str]] = mapped_column(String(32), unique=True, index=True, nullable=True)
    referred_by_id: Mapped[Optional[str]] = mapped_column(String(36), ForeignKey("referral_portal_users.id"), nullable=True)
    subscription_end: Mapped[Optional[Any]] = mapped_column(DateTime(timezone=True), nullable=True)
    bonus_balance_days: Mapped[int] = mapped_column(Integer, default=0, nullable=False)
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

    referred_users = relationship(
        "ReferralPortalReferral",
        back_populates="referrer",
        foreign_keys="ReferralPortalReferral.referrer_id",
        cascade="all, delete-orphan",
    )
    referral_record = relationship(
        "ReferralPortalReferral",
        back_populates="referee",
        foreign_keys="ReferralPortalReferral.referee_id",
        uselist=False,
    )
    bonus_events = relationship(
        "ReferralPortalBonusEvent",
        back_populates="user",
        cascade="all, delete-orphan",
    )


class ReferralPortalReferral(Base):
    __tablename__ = "referral_portal_referrals"

    id: Mapped[str] = mapped_column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    referrer_id: Mapped[str] = mapped_column(String(36), ForeignKey("referral_portal_users.id"), nullable=False)
    referee_id: Mapped[str] = mapped_column(String(36), ForeignKey("referral_portal_users.id"), nullable=False, unique=True)
    registration_ip: Mapped[Optional[str]] = mapped_column(String(64))
    registered_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())
    registration_bonus_days: Mapped[int] = mapped_column(Integer, default=0, nullable=False)
    subscription_bonus_awarded: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    subscription_bonus_days: Mapped[int] = mapped_column(Integer, default=0, nullable=False)
    subscription_awarded_at: Mapped[Optional[Any]] = mapped_column(DateTime(timezone=True))

    referrer = relationship(
        "ReferralPortalUser",
        foreign_keys=[referrer_id],
        back_populates="referred_users",
    )
    referee = relationship(
        "ReferralPortalUser",
        foreign_keys=[referee_id],
        back_populates="referral_record",
    )
    bonus_events = relationship(
        "ReferralPortalBonusEvent",
        back_populates="referral",
        cascade="all, delete-orphan",
    )


class ReferralPortalBonusEvent(Base):
    __tablename__ = "referral_portal_bonus_events"

    id: Mapped[str] = mapped_column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id: Mapped[str] = mapped_column(String(36), ForeignKey("referral_portal_users.id"), nullable=False)
    referral_id: Mapped[Optional[str]] = mapped_column(String(36), ForeignKey("referral_portal_referrals.id"), nullable=True)
    event_type: Mapped[str] = mapped_column(String(32), nullable=False)
    days_awarded: Mapped[int] = mapped_column(Integer, nullable=False)
    created_at: Mapped[Any] = mapped_column(DateTime(timezone=True), server_default=func.now())

    user = relationship("ReferralPortalUser", back_populates="bonus_events")
    referral = relationship("ReferralPortalReferral", back_populates="bonus_events")


@dataclass(frozen=True)
class ReferralServiceSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API-—Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ referral_app)."""

    referral_base_url: str = os.getenv(
        "REFERRAL_BASE_URL",
        "https://saas.example.com/register?code=",
    )
    registration_bonus_days: int = int(os.getenv("REGISTRATION_BONUS_DAYS", "3"))
    subscription_bonus_days: int = int(os.getenv("SUBSCRIPTION_BONUS_DAYS", "7"))
    max_registrations_per_ip: int = int(os.getenv("MAX_REGISTRATIONS_PER_IP", "1"))

    def referral_link(self, code: str) -> str:
        return urljoin(self.referral_base_url, code)


REFERRAL_SERVICE_SETTINGS = ReferralServiceSettings()


def _referral_hash_password(password: str) -> str:
    return hashlib.sha256(password.encode("utf-8")).hexdigest()


async def _referral_generate_code(session: AsyncSession) -> str:
    while True:
        code = uuid.uuid4().hex[:10]
        exists = await session.execute(
            select(ReferralPortalUser).where(ReferralPortalUser.referral_code == code)
        )
        if not exists.scalar_one_or_none():
            return code


async def _referral_get_user_by_id(
    session: AsyncSession, user_id: uuid.UUID
) -> Optional[ReferralPortalUser]:
    return await session.get(ReferralPortalUser, str(user_id))


async def _referral_get_user_by_email(
    session: AsyncSession, email: str
) -> Optional[ReferralPortalUser]:
    result = await session.execute(
        select(ReferralPortalUser).where(ReferralPortalUser.email == email)
    )
    return result.scalar_one_or_none()


def _referral_award_bonus_days(
    session: AsyncSession,
    user: ReferralPortalUser,
    days: int,
    event_type: str,
    referral: Optional[ReferralPortalReferral] = None,
) -> None:
    if days <= 0:
        return

    now = datetime.utcnow()
    user.bonus_balance_days += days

    if user.subscription_end and user.subscription_end > now:
        user.subscription_end = user.subscription_end + timedelta(days=days)
    else:
        user.subscription_end = now + timedelta(days=days)

    session.add(
        ReferralPortalBonusEvent(
            user=user,
            referral=referral,
            event_type=event_type,
            days_awarded=days,
        )
    )


async def _referral_register_user(
    session: AsyncSession,
    *,
    email: str,
    name: str,
    password: str,
    referral_code: Optional[str],
    request_ip: str,
) -> Tuple[ReferralPortalUser, int, Optional[uuid.UUID]]:
    if await _referral_get_user_by_email(session, email):
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    user = ReferralPortalUser(
        email=email,
        name=name,
        password_hash=_referral_hash_password(password),
    )
    session.add(user)
    await session.flush()

    awarded_days = 0
    referrer_uuid: Optional[uuid.UUID] = None

    if referral_code:
        referrer_result = await session.execute(
            select(ReferralPortalUser).where(ReferralPortalUser.referral_code == referral_code)
        )
        referrer = referrer_result.scalar_one_or_none()
        if not referrer:
            raise ValueError("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        ip_count_result = await session.execute(
            select(func.count()).select_from(ReferralPortalReferral).where(
                ReferralPortalReferral.referrer_id == referrer.id,
                ReferralPortalReferral.registration_ip == request_ip,
            )
        )
        ip_count = ip_count_result.scalar_one()
        if ip_count >= REFERRAL_SERVICE_SETTINGS.max_registrations_per_ip:
            raise ValueError("–° –¥–∞–Ω–Ω–æ–≥–æ IP —É–∂–µ –±—ã–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ")

        user.referred_by_id = referrer.id

        referral = ReferralPortalReferral(
            referrer_id=referrer.id,
            referee_id=user.id,
            registration_ip=request_ip,
            registration_bonus_days=REFERRAL_SERVICE_SETTINGS.registration_bonus_days,
        )
        session.add(referral)
        await session.flush()

        awarded_days = referral.registration_bonus_days
        referrer_uuid = uuid.UUID(referrer.id)
        _referral_award_bonus_days(
            session,
            referrer,
            referral.registration_bonus_days,
            event_type="registration",
            referral=referral,
        )

    return user, awarded_days, referrer_uuid


async def _referral_ensure_code(session: AsyncSession, user: ReferralPortalUser) -> str:
    if not user.referral_code:
        user.referral_code = await _referral_generate_code(session)
    return user.referral_code


async def _referral_process_successful_subscription(
    session: AsyncSession,
    *,
    subscriber: ReferralPortalUser,
    plan_days: int,
) -> Tuple[datetime, bool, Optional[uuid.UUID]]:
    now = datetime.utcnow()
    if subscriber.subscription_end and subscriber.subscription_end > now:
        subscriber.subscription_end = subscriber.subscription_end + timedelta(days=plan_days)
    else:
        subscriber.subscription_end = now + timedelta(days=plan_days)

    referrer_awarded = False
    referrer_uuid: Optional[uuid.UUID] = None

    if subscriber.referred_by_id:
        referral_result = await session.execute(
            select(ReferralPortalReferral).where(
                ReferralPortalReferral.referee_id == subscriber.id
            )
        )
        referral = referral_result.scalar_one_or_none()
        if referral and not referral.subscription_bonus_awarded:
            referrer = await session.get(ReferralPortalUser, referral.referrer_id)
            if referrer is None:
                raise ValueError("–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            referral.subscription_bonus_awarded = True
            referral.subscription_bonus_days = REFERRAL_SERVICE_SETTINGS.subscription_bonus_days
            referral.subscription_awarded_at = now

            _referral_award_bonus_days(
                session,
                referrer,
                referral.subscription_bonus_days,
                event_type="subscription",
                referral=referral,
            )
            referrer_awarded = True
            referrer_uuid = uuid.UUID(referrer.id)

    return subscriber.subscription_end or now, referrer_awarded, referrer_uuid


class GenerateReferralLinkRequest(BaseModel):
    user_id: uuid.UUID = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—é—â–µ–≥–æ —Å—Å—ã–ª–∫—É")


class ReferralLinkResponse(BaseModel):
    referral_code: str
    referral_link: str


class RegisterRequest(BaseModel):
    email: EmailStr
    name: str
    password: str
    referral_code: Optional[str] = Field(default=None, description="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
    request_ip: str = Field(..., description="IP –∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")


class RegisterResponse(BaseModel):
    user_id: uuid.UUID
    awarded_days: int
    referrer_id: Optional[uuid.UUID]


class SubscribeRequest(BaseModel):
    user_id: uuid.UUID
    plan_days: int = Field(..., gt=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞—ë—Ç –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")


class SubscribeResponse(BaseModel):
    user_id: uuid.UUID
    subscription_end: datetime
    referrer_bonus_awarded: bool
    referrer_id: Optional[uuid.UUID]


class ReferralInfo(BaseModel):
    referee_id: uuid.UUID
    email: EmailStr
    registered_at: datetime
    registration_bonus_days: int
    subscription_bonus_days: int
    subscription_bonus_awarded: bool


class MyReferralsResponse(BaseModel):
    referrer_id: uuid.UUID
    total_registration_days: int
    total_subscription_days: int
    referrals: List[ReferralInfo]


referral_api = FastAPI(title="Aura Referral Program API")


async def _referral_get_db() -> AsyncGenerator[AsyncSession, None]:
    async with SessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise


@referral_api.post("/generate-referral-link", response_model=ReferralLinkResponse)
async def api_generate_referral_link(
    payload: GenerateReferralLinkRequest,
    session: AsyncSession = Depends(_referral_get_db),
) -> ReferralLinkResponse:
    user = await _referral_get_user_by_id(session, payload.user_id)
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    code = await _referral_ensure_code(session, user)
    link = REFERRAL_SERVICE_SETTINGS.referral_link(code)
    return ReferralLinkResponse(referral_code=code, referral_link=link)


@referral_api.post("/register", response_model=RegisterResponse, status_code=status.HTTP_201_CREATED)
async def api_register(
    payload: RegisterRequest,
    session: AsyncSession = Depends(_referral_get_db),
) -> RegisterResponse:
    try:
        user, awarded_days, referrer_id = await _referral_register_user(
            session,
            email=payload.email,
            name=payload.name,
            password=payload.password,
            referral_code=payload.referral_code,
            request_ip=payload.request_ip,
        )
    except ValueError as exc:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(exc)) from exc

    return RegisterResponse(
        user_id=uuid.UUID(user.id),
        awarded_days=awarded_days,
        referrer_id=referrer_id,
    )


@referral_api.post("/subscribe", response_model=SubscribeResponse)
async def api_subscribe(
    payload: SubscribeRequest,
    session: AsyncSession = Depends(_referral_get_db),
) -> SubscribeResponse:
    subscriber = await _referral_get_user_by_id(session, payload.user_id)
    if not subscriber:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    subscription_end, referrer_bonus_awarded, referrer_id = await _referral_process_successful_subscription(
        session,
        subscriber=subscriber,
        plan_days=payload.plan_days,
    )

    return SubscribeResponse(
        user_id=uuid.UUID(subscriber.id),
        subscription_end=subscription_end,
        referrer_bonus_awarded=referrer_bonus_awarded,
        referrer_id=referrer_id,
    )


@referral_api.get("/my-referrals", response_model=MyReferralsResponse)
async def api_my_referrals(
    user_id: uuid.UUID,
    session: AsyncSession = Depends(_referral_get_db),
) -> MyReferralsResponse:
    user = await _referral_get_user_by_id(session, user_id)
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    referrals_result = await session.execute(
        select(ReferralPortalReferral).where(ReferralPortalReferral.referrer_id == user.id)
    )
    referrals = referrals_result.scalars().all()

    referral_infos: List[ReferralInfo] = []
    total_registration_days = 0
    total_subscription_days = 0

    for referral in referrals:
        referee = await session.get(ReferralPortalUser, referral.referee_id)
        if referee is None:
            continue
        referral_infos.append(
            ReferralInfo(
                referee_id=uuid.UUID(referral.referee_id),
                email=referee.email,
                registered_at=referral.registered_at,
                registration_bonus_days=referral.registration_bonus_days,
                subscription_bonus_days=referral.subscription_bonus_days,
                subscription_bonus_awarded=referral.subscription_bonus_awarded,
            )
        )
        total_registration_days += referral.registration_bonus_days
        total_subscription_days += referral.subscription_bonus_days

    return MyReferralsResponse(
        referrer_id=uuid.UUID(user.id),
        total_registration_days=total_registration_days,
        total_subscription_days=total_subscription_days,
        referrals=referral_infos,
    )


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# -------------------------
# 4) –ü–†–û–°–¢–û–ô –õ–û–ì –°–û–ë–´–¢–ò–ô (—Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤/e-mail)
# -------------------------
def _redact_pii(obj: Optional[dict]) -> Optional[dict]:
    if not obj:
        return obj
    text = json.dumps(obj, ensure_ascii=False)
    text = re.sub(r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}", "[email]", text)
    text = re.sub(r"(\+?\d[\d\s\-()]{8,}\d)", "[phone]", text)
    return {"text": text}

async def log_event(user_tg_id: str, event: str, payload: Optional[dict] = None):
    async with SessionLocal() as s:
        s.add(EventLog(user_tg_id=user_tg_id, event=event, payload=_redact_pii(payload)))
        await s.commit()

# -------------------------
# 5) –ê–ù–¢–ò–°–ü–ê–ú –ò –î–ï–î–£–ü (Redis –ò–õ–ò in-memory)
# -------------------------
_redis = None
if REDIS_URL:
    try:
        import redis.asyncio as redis  # type: ignore
        _redis = redis.from_url(REDIS_URL, decode_responses=True)
    except Exception:
        _redis = None

_recent_hashes: Dict[str, float] = {}  # in-memory TTL –ø–æ –∫–ª—é—á—É user:text

async def is_duplicate(user_id: int, text: str, ttl_sec: int = 30) -> bool:
    if not text:
        return False
    key = f"{user_id}:{hash(text.strip())}"
    now = time.time()
    if _redis:
        exists = await _redis.exists(f"anti:{key}")
        if exists:
            return True
        await _redis.setex(f"anti:{key}", ttl_sec, "1")
        return False
    # in-memory
    if key in _recent_hashes and now - _recent_hashes[key] < ttl_sec:
        return True
    _recent_hashes[key] = now
    return False

_user_minute_counts: Dict[str, int] = {}
_user_minute_ts: Dict[str, int] = {}

async def rate_limited(user_id: int, max_per_minute: int = 20) -> bool:
    now_min = int(time.time() // 60)
    uid = str(user_id)
    if _redis:
        # –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ Redis
        key = f"rate:{uid}:{now_min}"
        cnt = await _redis.incr(key)
        await _redis.expire(key, 60)
        return cnt > max_per_minute
    # in-memory
    last = _user_minute_ts.get(uid)
    if last != now_min:
        _user_minute_ts[uid] = now_min
        _user_minute_counts[uid] = 0
    _user_minute_counts[uid] = _user_minute_counts.get(uid, 0) + 1
    return _user_minute_counts[uid] > max_per_minute

# -------------------------
# 6) –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –û–ü–ê–°–ù–´–• –§–†–ê–ó (–∫—Ä–∏–∑–∏—Å)
# -------------------------
def detect_risk(text: str) -> Optional[str]:
    if not text:
        return None
    patterns_suicide = [
        r"\b(—Ö–æ—á—É|–¥—É–º–∞—é|–ø–ª–∞–Ω–∏—Ä—É—é)\s+(—É–º–µ—Ä–µ—Ç—å|—Å–¥–æ—Ö–Ω—É—Ç—å|–ø–æ–∫–æ–Ω—á–∏—Ç—å\s+—Å\s+—Å–æ–±–æ–π)\b",
        r"\b(–Ω–µ\s+—Ö–æ—á—É\s+–∂–∏—Ç—å|–∂–∏—Ç—å\s+–Ω–µ\s+—Ö–æ—á—É)\b",
        r"\b(—Å—É–∏—Ü–∏–¥|—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤[–æ–∞])\b",
        r"\b(–ø–æ—Ä–µ–∑–∞—Ç—å\s*—Å—è|–ø–æ–≤–µ—Å–∏—Ç—å\s*—Å—è|–ø–µ—Ä–µ—Ä–µ–∑–∞—Ç—å\s*–≤–µ–Ω—ã)\b",
        r"\b(–Ω–∞–≤—Ä–µ–¥–∏—Ç—å|–≤—Ä–µ–¥–∏—Ç—å)\s+—Å–µ–±–µ\b",
    ]
    patterns_violence = [r"\b(—É–±–∏—Ç—å|–Ω–∞–≤—Ä–µ–¥–∏—Ç—å)\s+(–µ–≥–æ|–µ–µ|–∏—Ö|—á–µ–ª–æ–≤–µ–∫—É|–ª—é–¥—è–º)\b"]
    for p in patterns_suicide:
        if re.search(p, text, re.IGNORECASE | re.UNICODE):
            return "suicide"
    for p in patterns_violence:
        if re.search(p, text, re.IGNORECASE | re.UNICODE):
            return "violence"
    return None

# -------------------------
# 7) ¬´–ú–û–ó–ì¬ª –î–õ–Ø –û–¢–í–ï–¢–û–í (DeepSeek —á–µ—Ä–µ–∑ HTTP)
# -------------------------
import httpx

async def deepseek_reply(messages: List[Dict[str, str]], temperature: float = 0.6, max_tokens: int = 600) -> str:
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –≤–µ—Ä–Ω—ë–º –º—è–≥–∫–∏–π –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–æ—Ç –Ω–µ —Å–ª–æ–º–∞–µ—Ç—Å—è)
    if not DEEPSEEK_API_KEY:
        return "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ—è—Å–Ω–∏—Ç—å? (–ø–æ–¥–∫–ª—é—á–∏—Ç–µ DEEPSEEK_API_KEY –¥–ª—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)"
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.post(
                f"{DEEPSEEK_BASE_URL}/chat/completions",
                headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"},
                json={"model": DEEPSEEK_MODEL, "messages": messages, "temperature": temperature, "max_tokens": max_tokens},
            )
            resp.raise_for_status()
            data = resp.json()
            return data["choices"][0]["message"]["content"]
    except Exception:
        return "–°–µ–π—á–∞—Å –º–Ω–µ —Ç—Ä—É–¥–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É. –Ø —Ä—è–¥–æ–º."

# -------------------------
# 8) TELEGRAM-–ë–û–¢ (aiogram 3)
# -------------------------
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, BotCommand,
    KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile,
    BotCommandScopeDefault, BotCommandScopeAllPrivateChats,
)

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

BOT_COMMANDS: List[BotCommand] = [
    BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
    BotCommand(command="persona", description="–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
    BotCommand(command="session", description="–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"),
    BotCommand(command="checkin", description="–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–∏–Ω"),
    BotCommand(command="journal", description="–ó–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞"),
    BotCommand(command="tests", description="–®–∫–∞–ª—ã PHQ-9/GAD-7"),
    BotCommand(command="resources", description="–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"),
    BotCommand(command="meditation", description="–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"),
    BotCommand(command="account", description="–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã"),
    BotCommand(command="invite", description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"),
    BotCommand(command="referrals", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"),
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –°–µ—Å—Å–∏—è"), KeyboardButton(text="üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂")],
        [KeyboardButton(text="‚úÖ –ß–µ–∫-–∏–Ω"), KeyboardButton(text="üß™ –®–∫–∞–ª—ã")],
        [KeyboardButton(text="üìù –î–Ω–µ–≤–Ω–∏–∫"), KeyboardButton(text="üÜò –†–µ—Å—É—Ä—Å—ã")],
        [KeyboardButton(text="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏"), KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üíå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")],
    ],
    resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
)

# -------------------------
# 8.1 –°—Ç–∞—Ä—Ç –∏ –º–µ–Ω—é + –æ–±—Ä–∞–±–æ—Ç–∫–∞ deep-link /start ref<code>
# -------------------------
start_router = Router()

async def _ensure_user(tg_id: int, username: Optional[str]) -> "User":
    # –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    async with SessionLocal() as s:
        user = (await s.execute(select(User).where(User.tg_id == str(tg_id)))).scalar_one_or_none()
        if not user:
            user = User(tg_id=str(tg_id), username=username or "", persona="pro_psychologist")
            s.add(user)
            await s.commit()
        return user

async def ensure_user_with_flag(tg_id: int, username: Optional[str]) -> Tuple["User", bool]:
    async with SessionLocal() as s:
        user = (await s.execute(select(User).where(User.tg_id == str(tg_id)))).scalar_one_or_none()
        created = False
        if not user:
            user = User(tg_id=str(tg_id), username=username or "", persona="pro_psychologist")
            s.add(user)
            await s.commit()
            created = True
        return user, created

# --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ---
_DIGITS36 = "0123456789abcdefghijklmnopqrstuvwxyz"
def _to_base36(n: int) -> str:
    if n < 0:
        raise ValueError("negative")
    if n == 0:
        return "0"
    s = []
    while n:
        n, r = divmod(n, 36)
        s.append(_DIGITS36[r])
    return "".join(reversed(s))

def _from_base36(s: str) -> int:
    return int(s.lower(), 36)

def make_ref_code(tg_id: int) -> str:
    # –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞—Ç–∏–º—ã–π –∫–æ–¥: XOR —Å —Å–æ–ª—å—é + base36
    return _to_base36((int(tg_id) ^ REF_SALT))

def parse_ref_code(code: str) -> Optional[int]:
    try:
        v = _from_base36(code.strip().lower())
        candidate = v ^ REF_SALT
        return int(candidate)
    except Exception:
        return None

async def record_referral(referrer_tg_id: int, referred_tg_id: int, code: str, status: str):
    async with SessionLocal() as s:
        # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –ø–∞—Ä—ã
        existing = (await s.execute(
            select(Referral).where(
                Referral.referrer_tg_id == str(referrer_tg_id),
                Referral.referred_tg_id == str(referred_tg_id)
            )
        )).scalar_one_or_none()
        if existing:
            # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —Å—Ç–∞–ª–æ ¬´–ª—É—á—à–µ¬ª (clicked -> joined -> paid)
            order = {"invalid":0, "self":0, "clicked":1, "joined":2, "paid":3}
            if order.get(status, 0) > order.get(existing.status, 0):
                existing.status = status
            await s.commit()
        else:
            s.add(Referral(code=code, referrer_tg_id=str(referrer_tg_id),
                           referred_tg_id=str(referred_tg_id), status=status))
            await s.commit()
    await log_event(str(referred_tg_id), "referral_"+status, {"referrer": str(referrer_tg_id), "code": code})

async def grant_bonus(user_tg_id: int, bonus_type: str, days: int, activated: bool = True, payload: Optional[dict] = None):
    async with SessionLocal() as s:
        s.add(UserBonus(user_tg_id=str(user_tg_id), type=bonus_type, days=days, activated=activated,
                        payload=payload or {}, activated_at=func.now() if activated else None))
        await s.commit()
    await log_event(str(user_tg_id), "bonus_granted", {"type": bonus_type, "days": days, "activated": activated})

async def activate_referral_reward_for_payer(payer_tg_id: int):
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é referral (joined/clicked) –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –±–æ–Ω—É—Å REF_BONUS_DAYS_PAID
    async with SessionLocal() as s:
        ref = (await s.execute(
            select(Referral).where(
                Referral.referred_tg_id == str(payer_tg_id),
                Referral.status.in_(("joined","clicked"))
            ).order_by(Referral.created_at.desc())
        )).scalars().first()
        if not ref:
            return False
        # –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å ‚Üí paid
        ref.status = "paid"
        await s.commit()
    # –Ω–∞—á–∏—Å–ª–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
    await grant_bonus(int(ref.referrer_tg_id), "ref_paid", REF_BONUS_DAYS_PAID, activated=True, payload={"from": str(payer_tg_id)})
    try:
        await bot.send_message(int(ref.referrer_tg_id),
                               f"üéâ –î—Ä—É–≥ —Å–æ–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É ‚Äî +{REF_BONUS_DAYS_PAID} –¥–Ω–µ–π –∫ –≤–∞—à–µ–º—É –¥–æ—Å—Ç—É–ø—É (–±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞).")
    except Exception:
        pass
    return True

@start_router.message(F.text.startswith("/start"))
async def cmd_start(message: Message):
    # –†–∞–∑–±–µ—Ä—ë–º payload —É /start (deep-link)
    payload = ""
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1:
        payload = parts[1].strip()

    user, created = await ensure_user_with_flag(message.from_user.id, message.from_user.username)

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: /start ref<code>
    if payload.startswith("ref"):
        code = payload[3:]
        referrer_tg_id = parse_ref_code(code)
        if not referrer_tg_id:
            await record_referral(0, message.from_user.id, code, "invalid")
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù–æ –Ω–∏—á–µ–≥–æ ‚Äî –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ —Ç–∞–∫ üíõ")
        elif int(referrer_tg_id) == int(message.from_user.id):
            await record_referral(referrer_tg_id, message.from_user.id, code, "self")
            await message.answer("–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòä –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º.")
        else:
            await record_referral(referrer_tg_id, message.from_user.id, code, "joined" if created else "clicked")
            if created:
                # –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É —Å—Ä–∞–∑—É
                await grant_bonus(message.from_user.id, "ref_join", REF_BONUS_DAYS_JOINED, activated=True, payload={"referrer": str(referrer_tg_id)})
                try:
                    await bot.send_message(int(referrer_tg_id),
                                           "üì£ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                                           f"–ü–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º –ø—Ä–∏–¥—ë—Ç +{REF_BONUS_DAYS_PAID} –¥–Ω–µ–π.")
                except Exception:
                    pass
                await message.answer(f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REF_BONUS_DAYS_JOINED} –¥–Ω–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.")
    # –ú–µ–Ω—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Aura ‚Äî –æ–Ω–ª–∞–π–Ω-–ø—Å–∏—Ö–æ–ª–æ–≥ –≤ Telegram.\n"
        "–Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é —Ç–µ—Ä–∞–ø–∏—é. –í –∫—Ä–∏–∑–∏—Å–µ –∑–≤–æ–Ω–∏—Ç–µ 112.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_KB,
    )
    await log_event(str(message.from_user.id), "menu_open", {"source": "start"})

@start_router.message(F.text == "/menu")
async def cmd_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=MAIN_KB)

# -------------------------
# 8.2 –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (—Ä–æ–ª–∏)
# -------------------------
persona_router = Router()

PERSONA_KB = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=PERSONAS["pro_psychologist"]["title"], callback_data="persona:pro_psychologist")],
        [InlineKeyboardButton(text=PERSONAS["mentor_growth"]["title"],    callback_data="persona:mentor_growth")],
        [InlineKeyboardButton(text=PERSONAS["friend_fun"]["title"],       callback_data="persona:friend_fun")],
    ]
)

@persona_router.message(F.text.in_({"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂", "/persona"}))
async def select_persona(message: Message):
    await message.answer("–ö–µ–º –º–Ω–µ –±—ã—Ç—å –¥–ª—è –≤–∞—Å –≤ –¥–∏–∞–ª–æ–≥–µ?", reply_markup=PERSONA_KB)

@persona_router.callback_query(F.data.startswith("persona:"))
async def set_persona(cb: CallbackQuery):
    persona = cb.data.split(":")[1]
    async with SessionLocal() as s:
        user = (await s.execute(select(User).where(User.tg_id == str(cb.from_user.id)))).scalar_one()
        user.persona = persona
        await s.commit()
    await cb.message.edit_text(f"–ì–æ—Ç–æ–≤–æ! –í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {PERSONAS[persona]['title']}")
    await log_event(str(cb.from_user.id), "persona_set", {"persona": persona})
    await cb.answer("–°—É–ø–µ—Ä!")

# -------------------------
# 8.3 –°–µ—Å—Å–∏—è (–¥–∏–∞–ª–æ–≥)
# -------------------------
session_router = Router()

@session_router.message(F.text == "üß† –°–µ—Å—Å–∏—è")
@session_router.message(F.text == "/session")
async def session_greet(message: Message):
    await message.answer("–ù–∞—á–Ω—ë–º. –ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ ‚Äî –º—ã—Å–ª—å, —á—É–≤—Å—Ç–≤–æ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è?")

@session_router.message(
F.text & ~F.text.in_({
    "üß† –°–µ—Å—Å–∏—è",
    "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂",
    "‚úÖ –ß–µ–∫-–∏–Ω",
    "üß™ –®–∫–∞–ª—ã",
    "–®–∫–∞–ª—ã",
    "—à–∫–∞–ª—ã",
    "/tests",
    "üìù –î–Ω–µ–≤–Ω–∏–∫",
    "üÜò –†–µ—Å—É—Ä—Å—ã",
    "–†–µ—Å—É—Ä—Å—ã",
    "—Ä–µ—Å—É—Ä—Å—ã",
    "/resources",
    "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏",
    "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",
    "–ü–æ–¥–ø–∏—Å–∫–∞",
    "–ø–æ–¥–ø–∏—Å–∫–∞",
    "/account",
    "üíå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
    "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã",
})
)
async def talk(message: Message):
    # –∞–Ω—Ç–∏—Å–ø–∞–º
    if await rate_limited(message.from_user.id):
        return await message.answer("–•–º, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ üôà –î–∞–≤–∞–π—Ç–µ –ø–æ —à–∞–≥—É‚Ä¶")
    if await is_duplicate(message.from_user.id, message.text):
        return
    # –∫—Ä–∏–∑–∏—Å
    if detect_risk(message.text):
        await message.answer(CRISIS_TEXT)
        await log_event(str(message.from_user.id), "crisis_detected", {"text": message.text})
        return
    # —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as s:
        user = (await s.execute(select(User).where(User.tg_id == str(message.from_user.id)))).scalar_one_or_none()
        if not user:
            user = User(tg_id=str(message.from_user.id), username=message.from_user.username or "", persona="pro_psychologist")
            s.add(user)
            await s.commit()
            await s.refresh(user)
        else:
            # –æ–±–Ω–æ–≤–∏–º username –ø—Ä–∏ —Å–º–µ–Ω–µ
            if message.from_user.username and user.username != message.from_user.username:
                user.username = message.from_user.username
                await s.commit()
                await s.refresh(user)
        history_stmt = (
            select(ConversationMessage)
            .where(ConversationMessage.user_id == user.id)
            .order_by(ConversationMessage.created_at.desc(), ConversationMessage.id.desc())
            .limit(CONVERSATION_HISTORY_LIMIT)
        )
        history = list(reversed((await s.execute(history_stmt)).scalars().all()))
    persona_key = user.persona if user else "pro_psychologist"
    system_prompt = PERSONAS[persona_key]["system"] + "\n\n" + STYLE_SYSTEM
    # –∑–∞–ø—Ä–æ—Å –∫ ¬´–º–æ–∑–≥—É¬ª
    messages_payload: List[Dict[str, str]] = [{"role": "system", "content": system_prompt}]
    for item in history:
        messages_payload.append({"role": item.role, "content": item.content})
    messages_payload.append({"role": "user", "content": message.text})

    reply = await deepseek_reply(messages_payload)
    await message.answer(reply)
    async with SessionLocal() as s:
        s.add_all([
            ConversationMessage(user_id=user.id, role="user", content=message.text),
            ConversationMessage(user_id=user.id, role="assistant", content=reply),
        ])
        await s.flush()
        extra_ids = (
            await s.execute(
                select(ConversationMessage.id)
                .where(ConversationMessage.user_id == user.id)
                .order_by(ConversationMessage.created_at.desc(), ConversationMessage.id.desc())
                .offset(CONVERSATION_HISTORY_LIMIT)
            )
        ).scalars().all()
        if extra_ids:
            await s.execute(delete(ConversationMessage).where(ConversationMessage.id.in_(extra_ids)))
        await s.commit()
    await log_event(str(message.from_user.id), "ai_reply", {"len": len(reply)})

# -------------------------
# 8.4 –ß–µ–∫-–∏–Ω (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
# -------------------------
checkin_router = Router()
MOODS = ["—Å–ø–æ–∫–æ–µ–Ω/—Å–ø–æ–∫–æ–π–Ω–∞", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "–≥—Ä—É—Å—Ç—å", "–∑–ª–æ—Å—Ç—å", "—É—Å—Ç–∞–ª–æ—Å—Ç—å", "—Ä–∞–¥–æ—Å—Ç—å", "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å"]
MOOD_KB = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text=m, callback_data=f"mood:{i}")] for i, m in enumerate(MOODS)]
)

@checkin_router.message(F.text.in_({"‚úÖ –ß–µ–∫-–∏–Ω", "/checkin"}))
async def checkin(message: Message):
    await message.answer("–ö–∞–∫ –≤—ã —Å–µ–π—á–∞—Å? –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", reply_markup=MOOD_KB)

@checkin_router.callback_query(F.data.startswith("mood:"))
async def mood_selected(cb: CallbackQuery):
    idx = int(cb.data.split(":")[1])
    mood = MOODS[idx]
    async with SessionLocal() as s:
        user_id = (await s.execute(sqltext("SELECT id FROM users WHERE tg_id=:t"), {"t": str(cb.from_user.id)})).scalar_one()
        s.add(JournalEntry(user_id=user_id, mood=mood, text=None))
        await s.commit()
    await cb.message.edit_text(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–∞: {mood}. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–º–µ—á–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã.")
    await log_event(str(cb.from_user.id), "checkin_saved", {"mood": mood})
    await cb.answer("–ì–æ—Ç–æ–≤–æ")

# -------------------------
# 8.5 –î–Ω–µ–≤–Ω–∏–∫ (5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
# -------------------------
journal_router = Router()
_journal_until: Dict[int, float] = {}  # user_id -> timestamp_deadline

@journal_router.message(F.text.in_({"üìù –î–Ω–µ–≤–Ω–∏–∫", "/journal"}))
async def journal_start(message: Message):
    _journal_until[message.from_user.id] = time.time() + 300  # 5 –º–∏–Ω—É—Ç
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤ –¥–Ω–µ–≤–Ω–∏–∫ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚Äî —É –≤–∞—Å 5 –º–∏–Ω—É—Ç, –ø–æ—Ç–æ–º –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è.")

@journal_router.message(F.text)
async def journal_capture(message: Message):
    deadline = _journal_until.get(message.from_user.id)
    if not deadline or time.time() > deadline:
        return  # –Ω–µ –≤ ¬´–æ–∫–Ω–µ –¥–Ω–µ–≤–Ω–∏–∫–∞¬ª
    async with SessionLocal() as s:
        user_id = (await s.execute(sqltext("SELECT id FROM users WHERE tg_id=:t"), {"t": str(message.from_user.id)})).scalar_one()
        s.add(JournalEntry(user_id=user_id, mood=None, text=message.text))
        await s.commit()
    _journal_until.pop(message.from_user.id, None)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª–∞ –∑–∞–ø–∏—Å—å. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ.")
    await log_event(str(message.from_user.id), "journal_saved", {"len": len(message.text)})

# -------------------------
# 8.6 –®–∫–∞–ª—ã PHQ-9 –∏ GAD-7 (–ø—Ä–æ—Å—Ç–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤)
# -------------------------
scales_router = Router()
PHQ9 = [
    "–ú–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏–ª–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –ª—é–±–∏–º—ã—Ö –∑–∞–Ω—è—Ç–∏–π",
    "–ü–æ–¥–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–ª–∏ –±–µ–∑–Ω–∞–¥—ë–∂–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
    "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å–æ —Å–Ω–æ–º –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å",
    "–£—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ —É–ø–∞–¥–æ–∫ —Å–∏–ª",
    "–ü–ª–æ—Ö–æ–π –∞–ø–ø–µ—Ç–∏—Ç –∏–ª–∏ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ",
    "–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –≤—ã –Ω–µ—É–¥–∞—á–Ω–∏–∫/–Ω–µ—É–¥–∞—á–Ω–∏—Ü–∞",
    "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π",
    "–ó–∞–º–µ–¥–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –∞–∂–∏—Ç–∞—Ü–∏—è (–∑–∞–º–µ—Ç–Ω–æ –æ–∫—Ä—É–∂–∞—é—â–∏–º)",
    "–ú—ã—Å–ª–∏, —á—Ç–æ –ª—É—á—à–µ –±—ã —É–º–µ—Ä–µ—Ç—å, –∏–ª–∏ –º—ã—Å–ª–∏ –æ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–∏ —Å–µ–±–µ –≤—Ä–µ–¥–∞",
]
GAD7 = [
    "–ß—É–≤—Å—Ç–≤–æ –Ω–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–≤–æ–≥–∏ –∏–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏ —Å—Ä—ã–≤–∞",
    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ",
    "–ß—Ä–µ–∑–º–µ—Ä–Ω—ã–µ –≤–æ–ª–Ω–µ–Ω–∏—è –æ —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–∞—Ö",
    "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ–º",
    "–ù–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É—Å–∏–¥–µ—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –∏–∑-–∑–∞ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞",
    "–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–°—Ç—Ä–∞—Ö, —á—Ç–æ —á—Ç–æ-—Ç–æ —É–∂–∞—Å–Ω–æ–µ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è",
]
ANSWER_LABELS = ["–ù–∏–∫–æ–≥–¥–∞ (0)", "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (1)", "–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–Ω–µ–π (2)", "–ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (3)"]

def _answers_kb(prefix: str, idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=txt, callback_data=f"{prefix}:{idx}:{score}")]
                         for score, txt in enumerate(ANSWER_LABELS)]
    )

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —à–∫–∞–ª: user_id -> {"phq":[...], "gad":[...]}
_scale_progress: Dict[int, Dict[str, List[int]]] = {}

@scales_router.message(text_matches("üß™ –®–∫–∞–ª—ã", "–®–∫–∞–ª—ã", "/tests"))
async def tests_menu(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="PHQ-9 (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)", callback_data="phq:0"),
             InlineKeyboardButton(text="GAD-7 (—Ç—Ä–µ–≤–æ–≥–∞)",   callback_data="gad:0")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–∞–ª—É. –≠—Ç–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞), –Ω–µ –¥–∏–∞–≥–Ω–æ–∑ –∏ –Ω–µ –∑–∞–º–µ–Ω–∞ –≤—Ä–∞—á—É.", reply_markup=kb)

@scales_router.callback_query(F.data.startswith("phq:"))
async def phq(cb: CallbackQuery):
    idx = int(cb.data.split(":")[1])
    if idx < len(PHQ9):
        await cb.message.edit_text(f"PHQ-9 ‚Äî –≤–æ–ø—Ä–æ—Å {idx+1}/9\n\n{PHQ9[idx]}\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏?", reply_markup=_answers_kb("phqa", idx))
        await cb.answer()

@scales_router.callback_query(F.data.startswith("gad:"))
async def gad(cb: CallbackQuery):
    idx = int(cb.data.split(":")[1])
    if idx < len(GAD7):
        await cb.message.edit_text(f"GAD-7 ‚Äî –≤–æ–ø—Ä–æ—Å {idx+1}/7\n\n{GAD7[idx]}\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏?", reply_markup=_answers_kb("gada", idx))
        await cb.answer()

async def _store_and_next(cb: CallbackQuery, scale_key: str, idx: int, score: int):
    prog = _scale_progress.setdefault(cb.from_user.id, {"phq": [], "gad": []})
    prog[scale_key].append(score)
    next_idx = idx + 1
    total_q = 9 if scale_key == "phq" else 7
    if next_idx < total_q:
        if scale_key == "phq":
            await cb.message.edit_text(f"PHQ-9 ‚Äî –≤–æ–ø—Ä–æ—Å {next_idx+1}/9\n\n{PHQ9[next_idx]}\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏?", reply_markup=_answers_kb("phqa", next_idx))
        else:
            await cb.message.edit_text(f"GAD-7 ‚Äî –≤–æ–ø—Ä–æ—Å {next_idx+1}/7\n\n{GAD7[next_idx]}\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏?", reply_markup=_answers_kb("gada", next_idx))
        await cb.answer()
        return
    # –∑–∞–∫–æ–Ω—á–∏–ª–∏: —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—É–º–º—É –≤ –ë–î
    scores = prog[scale_key]
    total = sum(scores)
    scale_name = "PHQ9" if scale_key == "phq" else "GAD7"
    async with SessionLocal() as s:
        user_id = (await s.execute(sqltext("SELECT id FROM users WHERE tg_id=:t"), {"t": str(cb.from_user.id)})).scalar_one()
        s.add(ScaleResult(user_id=user_id, scale=scale_name, score=total, answers={"scores": scores}))
        await s.commit()
    # –æ—á–∏—Å—Ç–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    prog[scale_key] = []
    await cb.message.edit_text(f"{scale_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª: {total}.\n–≠—Ç–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥, –Ω–µ –¥–∏–∞–≥–Ω–æ–∑. "
                               f"–ï—Å–ª–∏ –±–∞–ª–ª—ã –≤—ã—Å–æ–∫–∏ –∏–ª–∏ –µ—Å—Ç—å –º—ã—Å–ª–∏ –æ —Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é. "
                               f"–Ø –ø–æ–º–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.")
    await log_event(str(cb.from_user.id), "scale_finished", {"scale": scale_name, "score": total})
    await cb.answer("–ì–æ—Ç–æ–≤–æ")

@scales_router.callback_query(F.data.startswith("phqa:"))
async def phq_answer(cb: CallbackQuery):
    _, idx, score = cb.data.split(":")
    await _store_and_next(cb, "phq", int(idx), int(score))

@scales_router.callback_query(F.data.startswith("gada:"))
async def gad_answer(cb: CallbackQuery):
    _, idx, score = cb.data.split(":")
    await _store_and_next(cb, "gad", int(idx), int(score))

# -------------------------
# 8.7 –†–µ—Å—É—Ä—Å—ã –ø–æ–º–æ—â–∏
# -------------------------
resources_router = Router()

@resources_router.message(text_matches("üÜò –†–µ—Å—É—Ä—Å—ã", "–†–µ—Å—É—Ä—Å—ã", "/resources"))
async def resources(message: Message):
    await message.answer(CRISIS_TEXT, disable_web_page_preview=True)
    await log_event(str(message.from_user.id), "resources_open", {})

# -------------------------
# 8.8 –ü–æ–¥–ø–∏—Å–∫–∞ (–¥–µ–º–æ-—Å—á–µ—Ç–∞) –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ (—É–ª—É—á—à–µ–Ω–æ)
# -------------------------
account_router = Router()

def format_rub(amount: int) -> str:
    return f"{amount:,} ‚ÇΩ".replace(",", " ")

def build_tariff_overview() -> str:
    lines: List[str] = ["üí≥ *–¢–∞—Ä–∏—Ñ—ã Aura*", ""]
    for code in TARIFF_PLAN_ORDER:
        plan = TARIFF_PLANS[code]
        lines.append(
            f"*{plan['title']}* ‚Äî {format_rub(plan['monthly_price'])}/–º–µ—Å –∏–ª–∏ "
            f"{format_rub(plan['annual_price'])}/–≥–æ–¥ (—Å–∫–∏–¥–∫–∞ {plan['annual_discount']}%)"
        )
        lines.append(f"–õ–∏–º–∏—Ç—ã: {plan['limits']}.")
        lines.append(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {plan['support']}.")
        lines.append(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {plan['trial']}.")
        lines.append(
            f"–°—Ç–∞–≤–∫–∞ –∑–∞ –¥–æ–ø. 1000 —Å–æ–±—ã—Ç–∏–π: {format_rub(plan['extra_events_price'])}."
        )
        lines.append("–ê–¥–¥–æ–Ω—ã:")
        for addon in plan["addons"]:
            lines.append(f"‚Ä¢ {addon}")
        lines.append("")
    lines.append(f"*–ü–æ—á–µ–º—É —Ç–∞–∫–∏–µ —Ü–µ–Ω—ã?* {TARIFF_RATIONALE}")
    return "\n".join(lines).strip()

def build_tariff_faq() -> str:
    lines: List[str] = ["‚ùì *FAQ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º*", ""]
    for idx, item in enumerate(TARIFF_FAQ, start=1):
        lines.append(f"{idx}. *{item['q']}* {item['a']}")
    return "\n".join(lines).strip()

ACCOUNT_KB = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ ¬∑ –ú–µ—Å—è—Ü", callback_data="pay:znakomstvo:month"
            ),
            InlineKeyboardButton(
                text="–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ ¬∑ –ì–æ–¥ (-10%)", callback_data="pay:znakomstvo:annual"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–õ—ë–≥–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ ¬∑ –ú–µ—Å—è—Ü",
                callback_data="pay:legkoe_dyhanie:month",
            ),
            InlineKeyboardButton(
                text="–õ—ë–≥–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ ¬∑ –ì–æ–¥ (-12%)",
                callback_data="pay:legkoe_dyhanie:annual",
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ù–æ–≤–∞—è –∂–∏–∑–Ω—å ¬∑ –ú–µ—Å—è—Ü", callback_data="pay:novaya_zhizn:month"
            ),
            InlineKeyboardButton(
                text="–ù–æ–≤–∞—è –∂–∏–∑–Ω—å ¬∑ –ì–æ–¥ (-14%)",
                callback_data="pay:novaya_zhizn:annual",
            ),
        ],
    ]
)

@account_router.message(text_matches("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "–ü–æ–¥–ø–∏—Å–∫–∞", "–ø–æ–¥–ø–∏—Å–∫–∞", "/account"))
async def account(message: Message):
    # –ü–æ–∫–∞–∂–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é + –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
    async with SessionLocal() as s:
        bonuses = (await s.execute(
            select(UserBonus).where(UserBonus.user_tg_id == str(message.from_user.id))
        )).scalars().all()
    active_days = sum(b.days for b in bonuses if b.activated)
    pending_paid = 0  # –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏
    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º pending –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫ (joined, –Ω–æ –Ω–µ paid)
    async with SessionLocal() as s:
        joined = (await s.execute(select(Referral).where(
            Referral.referrer_tg_id == str(message.from_user.id),
            Referral.status.in_(("joined","clicked"))
        ))).scalars().all()
        paid = (await s.execute(select(Referral).where(
            Referral.referrer_tg_id == str(message.from_user.id),
            Referral.status == "paid"
        ))).scalars().all()
        pending_paid = max(0, len(joined) - len(paid))

    text = (
        "–í–∞—à–∏ –ø–ª–∞–Ω—ã –∏ –±–æ–Ω—É—Å—ã.\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: *{active_days}*\n"
        f"–û–∂–∏–¥–∞—é—Ç –±–æ–Ω—É—Å–∞ (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥—Ä—É–∑–µ–π): *{pending_paid}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –∏ –∏–∑—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ ‚§µÔ∏è"
    )
    await message.answer(text, reply_markup=ACCOUNT_KB)
    await message.answer(build_tariff_overview())
    await message.answer(build_tariff_faq())

@account_router.callback_query(F.data.startswith("pay:"))
async def pay(cb: CallbackQuery):
    _, plan_code, period = cb.data.split(":")
    plan = TARIFF_PLANS.get(plan_code)
    if not plan:
        await cb.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if period not in {"month", "annual"}:
        await cb.answer("–ü–µ—Ä–∏–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", show_alert=True)
        return

    price = plan["monthly_price"] if period == "month" else plan["annual_price"]
    descriptor = "–º–µ—Å—è—á–Ω—ã–π" if period == "month" else "–≥–æ–¥–æ–≤–æ–π"
    discount_note = (
        f" (—Å–∫–∏–¥–∫–∞ {plan['annual_discount']}%)" if period == "annual" else ""
    )

    # –¥–µ–º–æ-—Å—Å—ã–ª–∫–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏ –±–æ–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    url = "https://pay.yookassa.ru/demo"
    message_text = (
        f"–°—á—ë—Ç –Ω–∞ {descriptor} —Ç–∞—Ä–∏—Ñ ¬´{plan['title']}¬ª ‚Äî {format_rub(price)}{discount_note}.\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {url}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await cb.message.answer(message_text)
    await log_event(
        str(cb.from_user.id),
        "payment_created",
        {"plan": plan_code, "period": period, "price": price},
    )
    # –î–ï–ú–û: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥—Ä—É–≥ ¬´–æ–ø–ª–∞—Ç–∏–ª¬ª ‚Üí –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–µ—Å–ª–∏ –±—ã–ª)
    await activate_referral_reward_for_payer(cb.from_user.id)
    await cb.answer("–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

invite_router = Router()

@invite_router.message(F.text.in_({"üíå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "/invite"}))
async def invite(message: Message):
    code = make_ref_code(message.from_user.id)
    me = await bot.get_me()
    link = f"https://t.me/{me.username}?start=ref{code}"
    await message.answer(
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n"
        f"‚Ä¢ –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç *{REF_BONUS_DAYS_JOINED} –¥–Ω–µ–π* –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
        f"‚Ä¢ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –≤–ø–µ—Ä–≤—ã–µ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç ‚Äî –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è *{REF_BONUS_DAYS_PAID} –¥–Ω–µ–π*.\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–≥–æ–º üíõ"
    )
    await log_event(str(message.from_user.id), "referral_link_shown", {"code": code})

# –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
referrals_router = Router()

@referrals_router.message(F.text.in_({"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "/referrals"}))
async def referrals(message: Message):
    code = make_ref_code(message.from_user.id)
    me = await bot.get_me()
    link = f"https://t.me/{me.username}?start=ref{code}"
    async with SessionLocal() as s:
        total_clicked = (await s.execute(select(func.count()).select_from(
            select(Referral).where(Referral.referrer_tg_id == str(message.from_user.id),
                                   Referral.status == "clicked").subquery()
        ))).scalar_one()
        total_joined = (await s.execute(select(func.count()).select_from(
            select(Referral).where(Referral.referrer_tg_id == str(message.from_user.id),
                                   Referral.status.in_(("joined","paid"))).subquery()
        ))).scalar_one()
        total_paid    = (await s.execute(select(func.count()).select_from(
            select(Referral).where(Referral.referrer_tg_id == str(message.from_user.id),
                                   Referral.status == "paid").subquery()
        ))).scalar_one()
        bonuses = (await s.execute(
            select(UserBonus).where(UserBonus.user_tg_id == str(message.from_user.id))
        )).scalars().all()
    active_days = sum(b.days for b in bonuses if b.activated)
    text = (
        f"üë• *–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã*\n"
        f"–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{link}\n\n"
        f"–ö–ª–∏–∫–Ω—É–ª–∏: *{total_clicked}*\n"
        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: *{total_joined}*\n"
        f"–°–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É: *{total_paid}*\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: *{active_days}*"
    )
    await message.answer(text)

# -------------------------
# 8.9 –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–µ/URL –∞—É–¥–∏–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º file_id
# -------------------------
meditation_router = Router()

def _prettify_title(fname_no_ext: str) -> str:
    base = re.sub(r"[_\-]+", " ", fname_no_ext).strip()
    # –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    return " ".join(w.capitalize() for w in base.split())

def list_meditations() -> List[Dict[str, str]]:
    items: List[Dict[str, str]] = []
    if os.path.isdir(AUDIO_DIR):
        for fname in sorted(os.listdir(AUDIO_DIR)):
            if fname.lower().endswith((".mp3", ".m4a", ".ogg", ".oga", ".wav")):
                slug = os.path.splitext(fname)[0]
                items.append({
                    "slug": slug,
                    "title": _prettify_title(slug),
                    "filename": fname,
                    "path": os.path.join(AUDIO_DIR, fname)
                })
    return items

async def get_cached_file_id(key: str) -> Optional[str]:
    async with SessionLocal() as s:
        rec = (await s.execute(select(MediaCache).where(MediaCache.key == key))).scalar_one_or_none()
        return rec.file_id if rec else None

async def set_cached_file_id(key: str, file_id: str):
    async with SessionLocal() as s:
        rec = (await s.execute(select(MediaCache).where(MediaCache.key == key))).scalar_one_or_none()
        if rec:
            rec.file_id = file_id
        else:
            s.add(MediaCache(key=key, file_id=file_id))
        await s.commit()

def _meditation_keyboard(items: List[Dict[str, str]]) -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ
    kb = [[InlineKeyboardButton(text=i["title"], callback_data=f"med:{i['slug']}")] for i in items]
    return InlineKeyboardMarkup(inline_keyboard=kb or [[InlineKeyboardButton(text="–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å?", callback_data="med:help")]])

@meditation_router.message(F.text.in_({"üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", "/meditation"}))
async def meditations_menu(message: Message):
    items = list_meditations()
    if not items and not AUDIO_BASE_URL:
        text = (
            "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏: —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞—É–¥–∏–æ,\n"
            f"1) —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É: `{AUDIO_DIR}`\n"
            "2) –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ .mp3/.m4a/.ogg (–Ω–∞–ø—Ä–∏–º–µ—Ä, breath_3min.mp3)\n"
            "3) –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.\n\n"
            "–õ–∏–±–æ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è AUDIO_BASE_URL –∏ —Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ CDN."
        )
        await message.answer(text)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É:", reply_markup=_meditation_keyboard(items))

@meditation_router.callback_query(F.data == "med:help")
async def med_help(cb: CallbackQuery):
    await cb.message.edit_text(
        "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ:\n"
        f"‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: `{AUDIO_DIR}` ‚Äî –ø–æ–º–µ—Å—Ç–∏—Ç–µ .mp3/.m4a/.ogg\n"
        "‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ AUDIO_BASE_URL ‚Äî —Ç–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ñ–∞–π–ª –ø–æ URL.\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è/–¥–µ—Ñ–∏—Å—ã ‚Üí –ø—Ä–æ–±–µ–ª—ã)."
    )
    await cb.answer()

@meditation_router.callback_query(F.data.startswith("med:"))
async def med_play(cb: CallbackQuery):
    slug = cb.data.split(":")[1]
    items = list_meditations()
    item = next((i for i in items if i["slug"] == slug), None)

    key = f"med:{slug}"
    cached = await get_cached_file_id(key)
    if cached:
        await cb.message.answer_audio(audio=cached, caption="–ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò", title=item["title"] if item else None, performer="Aura")
        await cb.answer()
        await log_event(str(cb.from_user.id), "meditation_sent", {"slug": slug, "source": "cache"})
        return

    try:
        if item and os.path.isfile(item["path"]):
            sent = await cb.message.answer_audio(audio=FSInputFile(item["path"]), caption="–ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò", title=item["title"], performer="Aura")
            if sent.audio and sent.audio.file_id:
                await set_cached_file_id(key, sent.audio.file_id)
            await log_event(str(cb.from_user.id), "meditation_sent", {"slug": slug, "source": "local"})
        elif AUDIO_BASE_URL and item:
            url = f"{AUDIO_BASE_URL}/{item['filename']}"
            sent = await cb.message.answer_audio(audio=url, caption="–ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò", title=item["title"], performer="Aura")
            if sent.audio and sent.audio.file_id:
                await set_cached_file_id(key, sent.audio.file_id)
            await log_event(str(cb.from_user.id), "meditation_sent", {"slug": slug, "source": "url"})
        else:
            await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É/URL.")
        await cb.answer()
    except Exception as e:
        await cb.message.answer(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. {e}")
        await cb.answer()

# -------------------------
# 8.10 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
# -------------------------
async def setup_commands():
    scopes = [BotCommandScopeDefault(), BotCommandScopeAllPrivateChats()]
    for scope in scopes:
        await bot.set_my_commands(BOT_COMMANDS, scope=scope)

def register_routers():
    dp.include_router(start_router)
    dp.include_router(persona_router)
    dp.include_router(session_router)
    dp.include_router(checkin_router)
    dp.include_router(journal_router)
    dp.include_router(scales_router)
    dp.include_router(resources_router)
    dp.include_router(account_router)
    dp.include_router(invite_router)
    dp.include_router(referrals_router)
    dp.include_router(meditation_router)

# -------------------------
# 9) MAIN
# -------------------------
async def main():
    print("‚ñ∂ Aura –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    await init_db()
    register_routers()
    await setup_commands()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
